#JDBC驱动类
jdbc1.driver=${env.jdbc1.driver}
#数据库URL地址
jdbc1.url=${env.jdbc1.url}
#访问数据库用户名
jdbc1.username=${env.jdbc1.username}
#访问数据库的密码
jdbc1.password=${env.jdbc1.password}
#初始化连接
jdbc1.initialSize=${env.jdbc1.initialSize}
#最大活动连接
jdbc1.maxActive=${env.jdbc1.maxActive}
#最大空闲连接
jdbc1.maxIdle=${env.jdbc1.maxIdle}
#最小空闲连接
jdbc1.minIdle=${env.jdbc1.minIdle}
#从池中取连接的最大等待时间，单位ms.
jdbc1.maxWait=${env.jdbc1.maxWait}
#连接泄漏回收参数，当可用连接数少于3个时才执行
jdbc1.removeAbandoned=${env.jdbc1.removeAbandoned}
#连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值
jdbc1.removeAbandonedTimeout=${env.jdbc1.removeAbandonedTimeout}
#被丢弃的数据库连接是否做记录，以便跟踪
jdbc1.logAbandoned=${env.jdbc1.logAbandoned}
#验证使用的SQL语句
jdbc1.validationQuery=${env.jdbc1.validationQuery}
#借出连接时不要测试，否则很影响性能
jdbc1.testOnBorrow=${env.jdbc1.testOnBorrow}
#指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
jdbc1.testWhileIdle=${env.jdbc1.testWhileIdle}
#每30秒运行一次空闲连接回收器
jdbc1.timeBetweenEvictionRunsMillis=${env.jdbc1.timeBetweenEvictionRunsMillis}

jdbc2.driver=${env.jdbc2.driver}
jdbc2.url=${env.jdbc2.url}
jdbc2.username=${env.jdbc2.username}
jdbc2.password=${env.jdbc2.password}
jdbc2.initialSize=${env.jdbc2.initialSize}
jdbc2.maxActive=${env.jdbc2.maxActive}
jdbc2.maxIdle=${env.jdbc2.maxIdle}
jdbc2.minIdle=${env.jdbc2.minIdle}
jdbc2.maxWait=${env.jdbc2.maxWait}
jdbc2.removeAbandoned=${env.jdbc2.removeAbandoned}
jdbc2.removeAbandonedTimeout=${env.jdbc2.removeAbandonedTimeout}
jdbc2.logAbandoned=${env.jdbc2.logAbandoned}
jdbc2.validationQuery=${env.jdbc2.validationQuery}
jdbc2.testOnBorrow=${env.jdbc2.testOnBorrow}
jdbc2.testWhileIdle=${env.jdbc2.testWhileIdle}
jdbc2.timeBetweenEvictionRunsMillis=${env.jdbc2.timeBetweenEvictionRunsMillis}
