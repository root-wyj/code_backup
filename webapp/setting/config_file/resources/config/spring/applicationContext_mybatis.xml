<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	
    <!-- 导入属性配置文件 -->   
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/mybatis/mysql.properties</value>
				<value>classpath:config/redis/redis.properties</value>
			</list>
		</property>
	</bean> 
	
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc1.driver}"/>
		<property name="url" value="${jdbc1.url}" />
		<property name="username" value="${jdbc1.username}" />
		<property name="password" value="${jdbc1.password}"/>
		<property name="initialSize" value="${jdbc1.initialSize}" />
		<property name="maxActive" value="${jdbc1.maxActive}" />
		<property name="maxIdle" value="${jdbc1.maxIdle}"/>
		<property name="minIdle" value="${jdbc1.minIdle}" />
		<property name="maxWait" value="${jdbc1.maxWait}" />
		<property name="removeAbandoned" value="${jdbc1.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc1.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${jdbc1.logAbandoned}" />
		<property name="validationQuery" value="${jdbc1.validationQuery}" />
		<property name="testOnBorrow" value="${jdbc1.testOnBorrow}" />
		<property name="testWhileIdle" value="${jdbc1.testWhileIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc1.timeBetweenEvictionRunsMillis}" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	
	<bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc2.driver}"/>
		<property name="url" value="${jdbc2.url}" />
		<property name="username" value="${jdbc2.username}" />
		<property name="password" value="${jdbc2.password}"/>
		<property name="initialSize" value="${jdbc2.initialSize}" />
		<property name="maxActive" value="${jdbc2.maxActive}" />
		<property name="maxIdle" value="${jdbc2.maxIdle}"/>
		<property name="minIdle" value="${jdbc2.minIdle}" />
		<property name="maxWait" value="${jdbc2.maxWait}" />
		<property name="removeAbandoned" value="${jdbc2.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc2.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${jdbc2.logAbandoned}" />
		<property name="validationQuery" value="${jdbc2.validationQuery}" />
		<property name="testOnBorrow" value="${jdbc2.testOnBorrow}" />
		<property name="testWhileIdle" value="${jdbc2.testWhileIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc2.timeBetweenEvictionRunsMillis}" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	
 	<bean id="dynamicDataSource" class="com.shixi.web.common.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="dataSource1" key="dataSource1" />
				<entry value-ref="dataSource2" key="dataSource2" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource1"></property>
	</bean>
	
	<!-- (事务管理)txManager -->
	<bean id="txManager1"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
	<bean id="txManager2"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
  	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->  
	<tx:annotation-driven transaction-manager="txManager1" order="1"/>
	<tx:annotation-driven transaction-manager="txManager2" order="1"/>
	
  	<!-- spring 和 mybatis的完美整个，不需要mybatis的配置映射文件，如项目中的mybatis_cfg.xml -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置 alias -->
    	<property name="configLocation" value="classpath:config/mybatis/mybatis_mapper.xml" />
    	<!-- <property name="dataSource" ref="dynamicDataSource" /> -->
    	<property name="dataSource" ref="dynamicDataSource" />
    	
    	<!-- 自动扫描mapping.xml **表示迭代查找 -->
    	<property name="mapperLocations" value="classpath:com/shixi/web/mapper/*.xml"></property>
    	<property name="plugins">
        	<array>
                <bean class="com.shixi.web.shardbatis.ShardInterceptor"/>
                <bean class="com.github.pagehelper.PageInterceptor">
                	<property name="properties">
                		<value>
                			helperDialect=mysql
                			pageSizeZero=true
                			reasonable=true
                			autoRuntimeDialect=true
                			params=count=countSql
                		</value>
                	</property>
                </bean>
            </array>
        </property>
	</bean>  
	
	<!-- 使用spring的事务管理，这个类代替了SQLSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类，
		包下的类需要使用@MapperScan注解，否则容器注入会失败 -->
   	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.shixi.web.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
</beans>